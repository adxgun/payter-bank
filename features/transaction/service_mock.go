// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=transaction
//

// Package transaction is a generated GoMock package.
package transaction

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreditAccount mocks base method.
func (m *MockService) CreditAccount(ctx context.Context, req AccountTransactionParams) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditAccount", ctx, req)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditAccount indicates an expected call of CreditAccount.
func (mr *MockServiceMockRecorder) CreditAccount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditAccount", reflect.TypeOf((*MockService)(nil).CreditAccount), ctx, req)
}

// DebitAccount mocks base method.
func (m *MockService) DebitAccount(ctx context.Context, req AccountTransactionParams) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitAccount", ctx, req)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitAccount indicates an expected call of DebitAccount.
func (mr *MockServiceMockRecorder) DebitAccount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitAccount", reflect.TypeOf((*MockService)(nil).DebitAccount), ctx, req)
}

// GetAccountBalance mocks base method.
func (m *MockService) GetAccountBalance(ctx context.Context, accountID uuid.UUID) (Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance", ctx, accountID)
	ret0, _ := ret[0].(Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockServiceMockRecorder) GetAccountBalance(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockService)(nil).GetAccountBalance), ctx, accountID)
}

// GetTransactionHistory mocks base method.
func (m *MockService) GetTransactionHistory(ctx context.Context, accountID uuid.UUID) ([]Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", ctx, accountID)
	ret0, _ := ret[0].([]Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockServiceMockRecorder) GetTransactionHistory(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockService)(nil).GetTransactionHistory), ctx, accountID)
}

// Transfer mocks base method.
func (m *MockService) Transfer(ctx context.Context, req AccountTransactionParams) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, req)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockServiceMockRecorder) Transfer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockService)(nil).Transfer), ctx, req)
}
