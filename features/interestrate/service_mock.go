// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=interestrate
//

// Package interestrate is a generated GoMock package.
package interestrate

import (
	context "context"
	models "payter-bank/internal/database/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ApplyRates mocks base method.
func (m *MockService) ApplyRates(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyRates", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyRates indicates an expected call of ApplyRates.
func (mr *MockServiceMockRecorder) ApplyRates(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyRates", reflect.TypeOf((*MockService)(nil).ApplyRates), ctx)
}

// CreateInterestRate mocks base method.
func (m *MockService) CreateInterestRate(ctx context.Context, param CreateInterestRateParam) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInterestRate", ctx, param)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInterestRate indicates an expected call of CreateInterestRate.
func (mr *MockServiceMockRecorder) CreateInterestRate(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInterestRate", reflect.TypeOf((*MockService)(nil).CreateInterestRate), ctx, param)
}

// GetCurrentRate mocks base method.
func (m *MockService) GetCurrentRate(ctx context.Context) (*models.InterestRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRate", ctx)
	ret0, _ := ret[0].(*models.InterestRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRate indicates an expected call of GetCurrentRate.
func (mr *MockServiceMockRecorder) GetCurrentRate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRate", reflect.TypeOf((*MockService)(nil).GetCurrentRate), ctx)
}

// Start mocks base method.
func (m *MockService) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), ctx)
}

// UpdateCalculationFrequency mocks base method.
func (m *MockService) UpdateCalculationFrequency(ctx context.Context, param UpdateCalculationFrequencyParam) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCalculationFrequency", ctx, param)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCalculationFrequency indicates an expected call of UpdateCalculationFrequency.
func (mr *MockServiceMockRecorder) UpdateCalculationFrequency(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCalculationFrequency", reflect.TypeOf((*MockService)(nil).UpdateCalculationFrequency), ctx, param)
}

// UpdateRate mocks base method.
func (m *MockService) UpdateRate(ctx context.Context, param UpdateRateParam) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRate", ctx, param)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRate indicates an expected call of UpdateRate.
func (mr *MockServiceMockRecorder) UpdateRate(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRate", reflect.TypeOf((*MockService)(nil).UpdateRate), ctx, param)
}
