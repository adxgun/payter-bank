// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=auditlog
//

// Package auditlog is a generated GoMock package.
package auditlog

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	asynq "github.com/hibiken/asynq"
	gomock "go.uber.org/mock/gomock"
)

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
	isgomock struct{}
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// GetAuditLogs mocks base method.
func (m *MockQuery) GetAuditLogs(ctx context.Context, accountID uuid.UUID) ([]AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogs", ctx, accountID)
	ret0, _ := ret[0].([]AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogs indicates an expected call of GetAuditLogs.
func (mr *MockQueryMockRecorder) GetAuditLogs(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogs", reflect.TypeOf((*MockQuery)(nil).GetAuditLogs), ctx, accountID)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockService) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), ctx)
}

// Submit mocks base method.
func (m *MockService) Submit(ctx context.Context, event Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Submit indicates an expected call of Submit.
func (mr *MockServiceMockRecorder) Submit(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockService)(nil).Submit), ctx, event)
}

// MockauditLogProcessor is a mock of auditLogProcessor interface.
type MockauditLogProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockauditLogProcessorMockRecorder
	isgomock struct{}
}

// MockauditLogProcessorMockRecorder is the mock recorder for MockauditLogProcessor.
type MockauditLogProcessorMockRecorder struct {
	mock *MockauditLogProcessor
}

// NewMockauditLogProcessor creates a new mock instance.
func NewMockauditLogProcessor(ctrl *gomock.Controller) *MockauditLogProcessor {
	mock := &MockauditLogProcessor{ctrl: ctrl}
	mock.recorder = &MockauditLogProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauditLogProcessor) EXPECT() *MockauditLogProcessorMockRecorder {
	return m.recorder
}

// ProcessTask mocks base method.
func (m *MockauditLogProcessor) ProcessTask(ctx context.Context, task *asynq.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTask indicates an expected call of ProcessTask.
func (mr *MockauditLogProcessorMockRecorder) ProcessTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTask", reflect.TypeOf((*MockauditLogProcessor)(nil).ProcessTask), ctx, task)
}
