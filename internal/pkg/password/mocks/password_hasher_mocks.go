// Code generated by MockGen. DO NOT EDIT.
// Source: password.go
//
// Generated by this command:
//
//	mockgen -source=password.go -destination=./mocks/password_hasher_mocks.go -package=passwordhashermocks
//

// Package passwordhashermocks is a generated GoMock package.
package passwordhashermocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
	isgomock struct{}
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHasher) Hash(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockHasherMockRecorder) Hash(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHasher)(nil).Hash), password)
}

// Validate mocks base method.
func (m *MockHasher) Validate(hashed, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", hashed, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockHasherMockRecorder) Validate(hashed, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockHasher)(nil).Validate), hashed, password)
}
