// Code generated by MockGen. DO NOT EDIT.
// Source: number_generator.go
//
// Generated by this command:
//
//	mockgen -source=number_generator.go -destination=./mocks/number_generator_mocks.go -package=generatormocks
//

// Package generatormocks is a generated GoMock package.
package generatormocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNumberGenerator is a mock of NumberGenerator interface.
type MockNumberGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockNumberGeneratorMockRecorder
	isgomock struct{}
}

// MockNumberGeneratorMockRecorder is the mock recorder for MockNumberGenerator.
type MockNumberGeneratorMockRecorder struct {
	mock *MockNumberGenerator
}

// NewMockNumberGenerator creates a new mock instance.
func NewMockNumberGenerator(ctrl *gomock.Controller) *MockNumberGenerator {
	mock := &MockNumberGenerator{ctrl: ctrl}
	mock.recorder = &MockNumberGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNumberGenerator) EXPECT() *MockNumberGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockNumberGenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockNumberGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockNumberGenerator)(nil).Generate))
}
