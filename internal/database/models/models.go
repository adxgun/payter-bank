// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package models

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

type AccountType string

const (
	AccountTypeEXTERNAL AccountType = "EXTERNAL"
	AccountTypeCURRENT  AccountType = "CURRENT"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType `json:"account_type"`
	Valid       bool        `json:"valid"` // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type Currency string

const (
	CurrencyGBP Currency = "GBP"
	CurrencyEUR Currency = "EUR"
	CurrencyJPY Currency = "JPY"
)

func (e *Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currency(s)
	case string:
		*e = Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Currency: %T", src)
	}
	return nil
}

type NullCurrency struct {
	Currency Currency `json:"currency"`
	Valid    bool     `json:"valid"` // Valid is true if Currency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.Currency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Currency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Currency), nil
}

type Status string

const (
	StatusPENDING   Status = "PENDING"
	StatusACTIVE    Status = "ACTIVE"
	StatusSUSPENDED Status = "SUSPENDED"
	StatusCLOSED    Status = "CLOSED"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type UserType string

const (
	UserTypeEXTERNAL UserType = "EXTERNAL"
	UserTypeADMIN    UserType = "ADMIN"
	UserTypeCUSTOMER UserType = "CUSTOMER"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType `json:"user_type"`
	Valid    bool     `json:"valid"` // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type Account struct {
	ID            uuid.UUID     `json:"id"`
	UserID        uuid.UUID     `json:"user_id"`
	AccountNumber string        `json:"account_number"`
	AccountType   AccountType   `json:"account_type"`
	Status        Status        `json:"status"`
	Currency      Currency      `json:"currency"`
	CreatedAt     sql.NullTime  `json:"created_at"`
	UpdatedAt     sql.NullTime  `json:"updated_at"`
	DeletedAt     sql.NullTime  `json:"deleted_at"`
	Balance       sql.NullInt64 `json:"balance"`
}

type AuditLog struct {
	ID                uuid.UUID             `json:"id"`
	UserID            uuid.UUID             `json:"user_id"`
	AffectedAccountID uuid.NullUUID         `json:"affected_account_id"`
	Action            string                `json:"action"`
	Metadata          pqtype.NullRawMessage `json:"metadata"`
	CreatedAt         sql.NullTime          `json:"created_at"`
	UpdatedAt         sql.NullTime          `json:"updated_at"`
	DeletedAt         sql.NullTime          `json:"deleted_at"`
}

type InterestRate struct {
	ID                   uuid.UUID    `json:"id"`
	Rate                 int64        `json:"rate"`
	CalculationFrequency string       `json:"calculation_frequency"`
	CreatedAt            sql.NullTime `json:"created_at"`
	UpdatedAt            sql.NullTime `json:"updated_at"`
	DeletedAt            sql.NullTime `json:"deleted_at"`
}

type Transaction struct {
	ID              uuid.UUID      `json:"id"`
	FromAccountID   uuid.UUID      `json:"from_account_id"`
	ToAccountID     uuid.UUID      `json:"to_account_id"`
	Amount          int64          `json:"amount"`
	ReferenceNumber string         `json:"reference_number"`
	Description     sql.NullString `json:"description"`
	Status          string         `json:"status"`
	Currency        string         `json:"currency"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	DeletedAt       sql.NullTime   `json:"deleted_at"`
}

type User struct {
	ID        uuid.UUID    `json:"id"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	FirstName string       `json:"first_name"`
	LastName  string       `json:"last_name"`
	UserType  UserType     `json:"user_type"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}
