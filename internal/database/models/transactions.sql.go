// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transactions.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getAccountBalance = `-- name: GetAccountBalance :one
SELECT
    a.id AS account_id,
    a.account_number AS account_number,
    a.currency AS currency,
    a.account_type AS account_type,
    (
        COALESCE(SUM(CASE WHEN t.to_account_id = a.id THEN t.amount ELSE 0 END), 0) -
        COALESCE(SUM(CASE WHEN t.from_account_id = a.id THEN t.amount ELSE 0 END), 0)
    ) AS balance
FROM accounts a
    LEFT JOIN
        transactions t ON a.id = t.from_account_id OR a.id = t.to_account_id
    WHERE a.id = $1
GROUP BY
    a.id, a.account_number, a.currency LIMIT 1
`

type GetAccountBalanceRow struct {
	AccountID     uuid.UUID   `json:"account_id"`
	AccountNumber string      `json:"account_number"`
	Currency      Currency    `json:"currency"`
	AccountType   AccountType `json:"account_type"`
	Balance       int32       `json:"balance"`
}

func (q *Queries) GetAccountBalance(ctx context.Context, id uuid.UUID) (GetAccountBalanceRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountBalance, id)
	var i GetAccountBalanceRow
	err := row.Scan(
		&i.AccountID,
		&i.AccountNumber,
		&i.Currency,
		&i.AccountType,
		&i.Balance,
	)
	return i, err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, from_account_id, to_account_id, amount, reference_number, description, status, currency, created_at, updated_at, deleted_at FROM transactions WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.ReferenceNumber,
		&i.Description,
		&i.Status,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTransactionsByAccountID = `-- name: GetTransactionsByAccountID :many
SELECT
    t.id AS transaction_id,
    t.from_account_id AS from_account_id,
    t.to_account_id AS to_account_id,
    t.amount AS amount,
    t.reference_number AS reference_number,
    t.description AS description,
    t.status AS status,
    t.currency AS currency,
    t.created_at AS created_at,
    t.updated_at AS updated_at
FROM
    transactions t
WHERE
    t.from_account_id = $1 OR t.to_account_id = $1
ORDER BY
    t.created_at DESC
`

type GetTransactionsByAccountIDRow struct {
	TransactionID   uuid.UUID      `json:"transaction_id"`
	FromAccountID   uuid.UUID      `json:"from_account_id"`
	ToAccountID     uuid.UUID      `json:"to_account_id"`
	Amount          int64          `json:"amount"`
	ReferenceNumber string         `json:"reference_number"`
	Description     sql.NullString `json:"description"`
	Status          string         `json:"status"`
	Currency        string         `json:"currency"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetTransactionsByAccountID(ctx context.Context, fromAccountID uuid.UUID) ([]GetTransactionsByAccountIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByAccountID, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsByAccountIDRow
	for rows.Next() {
		var i GetTransactionsByAccountIDRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.ReferenceNumber,
			&i.Description,
			&i.Status,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTransaction = `-- name: SaveTransaction :one
INSERT INTO transactions(
    from_account_id, to_account_id, amount, reference_number, description, status, currency
) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, from_account_id, to_account_id, amount, reference_number, description, status, currency, created_at, updated_at, deleted_at
`

type SaveTransactionParams struct {
	FromAccountID   uuid.UUID      `json:"from_account_id"`
	ToAccountID     uuid.UUID      `json:"to_account_id"`
	Amount          int64          `json:"amount"`
	ReferenceNumber string         `json:"reference_number"`
	Description     sql.NullString `json:"description"`
	Status          string         `json:"status"`
	Currency        string         `json:"currency"`
}

func (q *Queries) SaveTransaction(ctx context.Context, arg SaveTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, saveTransaction,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.ReferenceNumber,
		arg.Description,
		arg.Status,
		arg.Currency,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.ReferenceNumber,
		&i.Description,
		&i.Status,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE accounts a
    SET balance = (
        SELECT
            COALESCE(SUM(CASE WHEN t.to_account_id = a.id THEN t.amount ELSE 0 END), 0) -
            COALESCE(SUM(CASE WHEN t.from_account_id = a.id THEN t.amount ELSE 0 END), 0)
        FROM transactions t
        WHERE t.from_account_id = a.id OR t.to_account_id = a.id
    )
WHERE a.id = $1
`

func (q *Queries) UpdateBalance(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateBalance, id)
	return err
}
