// Code generated by MockGen. DO NOT EDIT.
// Source: ./models/querier.go
//
// Generated by this command:
//
//	mockgen -source=./models/querier.go -destination=./models/mocks/mock_querier.go -package=databasemocks
//

// Package databasemocks is a generated GoMock package.
package databasemocks

import (
	context "context"
	models "payter-bank/internal/database/models"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// GetAccountBalance mocks base method.
func (m *MockQuerier) GetAccountBalance(ctx context.Context, id uuid.UUID) (models.GetAccountBalanceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance", ctx, id)
	ret0, _ := ret[0].(models.GetAccountBalanceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockQuerierMockRecorder) GetAccountBalance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockQuerier)(nil).GetAccountBalance), ctx, id)
}

// GetAccountByID mocks base method.
func (m *MockQuerier) GetAccountByID(ctx context.Context, id uuid.UUID) (models.GetAccountByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, id)
	ret0, _ := ret[0].(models.GetAccountByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockQuerierMockRecorder) GetAccountByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockQuerier)(nil).GetAccountByID), ctx, id)
}

// GetAccountStatusHistory mocks base method.
func (m *MockQuerier) GetAccountStatusHistory(ctx context.Context, affectedAccountID uuid.NullUUID) ([]models.GetAccountStatusHistoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountStatusHistory", ctx, affectedAccountID)
	ret0, _ := ret[0].([]models.GetAccountStatusHistoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountStatusHistory indicates an expected call of GetAccountStatusHistory.
func (mr *MockQuerierMockRecorder) GetAccountStatusHistory(ctx, affectedAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountStatusHistory", reflect.TypeOf((*MockQuerier)(nil).GetAccountStatusHistory), ctx, affectedAccountID)
}

// GetAllActiveAccounts mocks base method.
func (m *MockQuerier) GetAllActiveAccounts(ctx context.Context) ([]models.GetAllActiveAccountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveAccounts", ctx)
	ret0, _ := ret[0].([]models.GetAllActiveAccountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveAccounts indicates an expected call of GetAllActiveAccounts.
func (mr *MockQuerierMockRecorder) GetAllActiveAccounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveAccounts", reflect.TypeOf((*MockQuerier)(nil).GetAllActiveAccounts), ctx)
}

// GetInterestRates mocks base method.
func (m *MockQuerier) GetInterestRates(ctx context.Context) ([]models.InterestRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterestRates", ctx)
	ret0, _ := ret[0].([]models.InterestRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterestRates indicates an expected call of GetInterestRates.
func (mr *MockQuerierMockRecorder) GetInterestRates(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterestRates", reflect.TypeOf((*MockQuerier)(nil).GetInterestRates), ctx)
}

// GetProfileByUserID mocks base method.
func (m *MockQuerier) GetProfileByUserID(ctx context.Context, id uuid.UUID) (models.GetProfileByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUserID", ctx, id)
	ret0, _ := ret[0].(models.GetProfileByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUserID indicates an expected call of GetProfileByUserID.
func (mr *MockQuerierMockRecorder) GetProfileByUserID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUserID", reflect.TypeOf((*MockQuerier)(nil).GetProfileByUserID), ctx, id)
}

// GetTransactionByID mocks base method.
func (m *MockQuerier) GetTransactionByID(ctx context.Context, id uuid.UUID) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, id)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockQuerierMockRecorder) GetTransactionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockQuerier)(nil).GetTransactionByID), ctx, id)
}

// GetTransactionsByAccountID mocks base method.
func (m *MockQuerier) GetTransactionsByAccountID(ctx context.Context, fromAccountID uuid.UUID) ([]models.GetTransactionsByAccountIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAccountID", ctx, fromAccountID)
	ret0, _ := ret[0].([]models.GetTransactionsByAccountIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByAccountID indicates an expected call of GetTransactionsByAccountID.
func (mr *MockQuerierMockRecorder) GetTransactionsByAccountID(ctx, fromAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAccountID", reflect.TypeOf((*MockQuerier)(nil).GetTransactionsByAccountID), ctx, fromAccountID)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (models.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(models.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockQuerier) GetUserByID(ctx context.Context, id uuid.UUID) (models.GetUserByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(models.GetUserByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockQuerierMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockQuerier)(nil).GetUserByID), ctx, id)
}

// SaveAccount mocks base method.
func (m *MockQuerier) SaveAccount(ctx context.Context, arg models.SaveAccountParams) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", ctx, arg)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAccount indicates an expected call of SaveAccount.
func (mr *MockQuerierMockRecorder) SaveAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockQuerier)(nil).SaveAccount), ctx, arg)
}

// SaveAuditLog mocks base method.
func (m *MockQuerier) SaveAuditLog(ctx context.Context, arg models.SaveAuditLogParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAuditLog", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAuditLog indicates an expected call of SaveAuditLog.
func (mr *MockQuerierMockRecorder) SaveAuditLog(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAuditLog", reflect.TypeOf((*MockQuerier)(nil).SaveAuditLog), ctx, arg)
}

// SaveInterestRate mocks base method.
func (m *MockQuerier) SaveInterestRate(ctx context.Context, arg models.SaveInterestRateParams) (models.InterestRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInterestRate", ctx, arg)
	ret0, _ := ret[0].(models.InterestRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveInterestRate indicates an expected call of SaveInterestRate.
func (mr *MockQuerierMockRecorder) SaveInterestRate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInterestRate", reflect.TypeOf((*MockQuerier)(nil).SaveInterestRate), ctx, arg)
}

// SaveTransaction mocks base method.
func (m *MockQuerier) SaveTransaction(ctx context.Context, arg models.SaveTransactionParams) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransaction", ctx, arg)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockQuerierMockRecorder) SaveTransaction(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockQuerier)(nil).SaveTransaction), ctx, arg)
}

// SaveUser mocks base method.
func (m *MockQuerier) SaveUser(ctx context.Context, arg models.SaveUserParams) (models.SaveUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, arg)
	ret0, _ := ret[0].(models.SaveUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockQuerierMockRecorder) SaveUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockQuerier)(nil).SaveUser), ctx, arg)
}

// UpdateAccountStatus mocks base method.
func (m *MockQuerier) UpdateAccountStatus(ctx context.Context, arg models.UpdateAccountStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountStatus indicates an expected call of UpdateAccountStatus.
func (mr *MockQuerierMockRecorder) UpdateAccountStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateAccountStatus), ctx, arg)
}

// UpdateCalculationFrequency mocks base method.
func (m *MockQuerier) UpdateCalculationFrequency(ctx context.Context, arg models.UpdateCalculationFrequencyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCalculationFrequency", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCalculationFrequency indicates an expected call of UpdateCalculationFrequency.
func (mr *MockQuerierMockRecorder) UpdateCalculationFrequency(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCalculationFrequency", reflect.TypeOf((*MockQuerier)(nil).UpdateCalculationFrequency), ctx, arg)
}

// UpdateRate mocks base method.
func (m *MockQuerier) UpdateRate(ctx context.Context, arg models.UpdateRateParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRate", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRate indicates an expected call of UpdateRate.
func (mr *MockQuerierMockRecorder) UpdateRate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRate", reflect.TypeOf((*MockQuerier)(nil).UpdateRate), ctx, arg)
}
