// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: interest_rate.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const getInterestRates = `-- name: GetInterestRates :many
SELECT id, rate, calculation_frequency, created_at, updated_at, deleted_at FROM interest_rates ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetInterestRates(ctx context.Context) ([]InterestRate, error) {
	rows, err := q.db.QueryContext(ctx, getInterestRates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InterestRate
	for rows.Next() {
		var i InterestRate
		if err := rows.Scan(
			&i.ID,
			&i.Rate,
			&i.CalculationFrequency,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveInterestRate = `-- name: SaveInterestRate :one
INSERT INTO interest_rates(
    rate, calculation_frequency
) VALUES ($1, $2) RETURNING id, rate, calculation_frequency, created_at, updated_at, deleted_at
`

type SaveInterestRateParams struct {
	Rate                 int64  `json:"rate"`
	CalculationFrequency string `json:"calculation_frequency"`
}

func (q *Queries) SaveInterestRate(ctx context.Context, arg SaveInterestRateParams) (InterestRate, error) {
	row := q.db.QueryRowContext(ctx, saveInterestRate, arg.Rate, arg.CalculationFrequency)
	var i InterestRate
	err := row.Scan(
		&i.ID,
		&i.Rate,
		&i.CalculationFrequency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCalculationFrequency = `-- name: UpdateCalculationFrequency :exec
UPDATE interest_rates
    SET calculation_frequency = $1, updated_at = CURRENT_TIMESTAMP
    WHERE id = $2 RETURNING id, rate, calculation_frequency, created_at, updated_at, deleted_at
`

type UpdateCalculationFrequencyParams struct {
	CalculationFrequency string    `json:"calculation_frequency"`
	ID                   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCalculationFrequency(ctx context.Context, arg UpdateCalculationFrequencyParams) error {
	_, err := q.db.ExecContext(ctx, updateCalculationFrequency, arg.CalculationFrequency, arg.ID)
	return err
}

const updateRate = `-- name: UpdateRate :exec
UPDATE interest_rates
    SET rate = $1, updated_at = CURRENT_TIMESTAMP
    WHERE id = $2 RETURNING id, rate, calculation_frequency, created_at, updated_at, deleted_at
`

type UpdateRateParams struct {
	Rate int64     `json:"rate"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateRate(ctx context.Context, arg UpdateRateParams) error {
	_, err := q.db.ExecContext(ctx, updateRate, arg.Rate, arg.ID)
	return err
}
